// @ts-nocheck
// This file is autogenerated by scripts/build-registry.tsx
// Do not edit this file directly.
import { ComponentEntry } from '@/registry/types';
import * as React from 'react';

export const Index: Record<string, ComponentEntry> = {
  button: {
    name: 'button',
    title: 'Button',
    description: 'Button component',
    dependencies: [
      {
        name: '@radix-ui/react-slot',
        url: 'https://www.npmjs.com/package/@radix-ui/react-slot',
        version: '',
      },
    ],
    component: React.lazy(() => import('@/registry/preview/button.tsx')),
    codeString: `import { cn } from '@/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { VariantProps, cva } from 'class-variance-authority';\nimport React from 'react';\n\nconst buttonVariants = cva(\n  'rounded-md text-sm font-medium focus-visible:ring-offset-2 focus-visible:ring-lime-400 focus-visible:ring-2 focus-visible:outline-none focus-visible:ring-offset-white transition-colors inline-flex justify-center items-center',\n  {\n    variants: {\n      variant: {\n        default: 'bg-lime-400 text-zinc-900 shadow-sm hover:bg-lime-300',\n        outline:\n          'border border-zinc-200 ring-4 ring-zinc-50 bg-white hover:bg-zinc-100 text-zinc-700',\n      },\n      size: {\n        default: 'px-4 py-2',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\ninterface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (props, ref) => {\n    const { className, variant, size, asChild, ...rest } = props;\n\n    const Component = asChild ? Slot : 'button';\n\n    return (\n      <Component\n        ref={ref}\n        {...rest}\n        className={cn(buttonVariants({ variant, size, className }))}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n`,
  },
  input: {
    name: 'input',
    title: 'Input',
    description:
      'Input component for forms and more. This is a simple input component.',
    dependencies: [
      {
        name: '@tailwindcss/forms',
        url: 'https://github.com/tailwindlabs/tailwindcss-forms',
        version: '',
      },
    ],
    component: React.lazy(() => import('@/registry/preview/input.tsx')),
    codeString: `import { cn } from '@/lib/utils';\nimport React from 'react';\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>((props, ref) => {\n  const { className, ...rest } = props;\n\n  return (\n    <input\n      ref={ref}\n      className={cn(\n        'rounded-md border border-zinc-200 px-3 py-2 text-sm text-zinc-900 caret-zinc-500 ring-4 ring-zinc-100 transition-colors placeholder:text-zinc-500 focus-within:border-lime-300 focus-within:outline-none focus-within:ring-lime-100 focus-visible:ring-4 disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-70',\n        className\n      )}\n      {...rest}\n    />\n  );\n});\nInput.displayName = 'Input';\n\nexport { Input };\n`,
  },
  terminal: {
    name: 'terminal',
    title: 'Terminal',
    description: 'Terminal component for displaying command line interfaces.',
    dependencies: [
      {
        name: 'react-syntax-highlighter',
        url: 'https://github.com/react-syntax-highlighter/react-syntax-highlighter',
        version: '',
      },
    ],
    component: React.lazy(() => import('@/registry/preview/terminal.tsx')),
    codeString: `'use client';\n\nimport { cn } from '@/lib/utils';\nimport TerminalStyle from '@/styles/prism/terminal';\nimport { CheckIcon, ClipboardIcon, TerminalIcon } from 'lucide-react';\nimport React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport bash from 'react-syntax-highlighter/dist/cjs/languages/prism/bash';\n\nSyntaxHighlighter.registerLanguage('bash', bash);\n\n/** -----------------------------------------------------------------\n *  Context\n *  ----------------------------------------------------------------- */\ntype TerminalContextType = {\n  codeString: string;\n  setCodeString: React.Dispatch<React.SetStateAction<string>>;\n};\n\nconst TerminalContext = React.createContext<TerminalContextType>(\n  {} as TerminalContextType\n);\n\nfunction useTerminal() {\n  const context = React.useContext(TerminalContext);\n\n  if (!context) {\n    throw new Error('useTerminal must be used within a TerminalProvider');\n  }\n\n  return context;\n}\n\nconst TerminalProvider = TerminalContext.Provider;\n\n/** -----------------------------------------------------------------\n *  Root\n *  ----------------------------------------------------------------- */\nconst Root = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n  const [codeString, setCodeString] = React.useState<string>('');\n\n  return (\n    <TerminalProvider\n      value={{\n        codeString,\n        setCodeString,\n      }}\n    >\n      <div\n        ref={ref}\n        {...rest}\n        className={cn(\n          'w-full max-w-xl rounded-xl border border-zinc-200 bg-zinc-50 p-1',\n          className\n        )}\n      >\n        <div className="w-full overflow-hidden rounded-lg border border-zinc-200">\n          {children}\n        </div>\n      </div>\n    </TerminalProvider>\n  );\n});\nRoot.displayName = 'Root';\n\n/** -----------------------------------------------------------------\n *  Header\n *  ----------------------------------------------------------------- */\nconst Header = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  return (\n    <div\n      ref={ref}\n      {...rest}\n      className={cn(\n        'flex items-center justify-start border-b border-inherit bg-zinc-100 py-1.5 pl-4 pr-2.5',\n        className\n      )}\n    >\n      <TerminalIcon className="h-4 w-4 text-zinc-700" />\n      <p className="ms-2 text-sm font-medium text-zinc-500">Terminal</p>\n      {children}\n    </div>\n  );\n});\nHeader.displayName = 'Header';\n\n/** -----------------------------------------------------------------\n *  CopyButton\n *  ----------------------------------------------------------------- */\n\ninterface CopyButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n  handleCopy?: (codeString?: string) => void;\n  copyDelay?: number;\n}\n\nconst CopyButton = React.forwardRef<HTMLButtonElement, CopyButtonProps>(\n  (props, ref) => {\n    const {\n      className,\n      handleCopy: imperativeHandleCopy,\n      copyDelay,\n      ...rest\n    } = props;\n    const { codeString } = useTerminal();\n    const [copied, setCopied] = React.useState<boolean>(false);\n\n    const handleCopy = () => {\n      if (imperativeHandleCopy) {\n        imperativeHandleCopy(codeString);\n      } else {\n        navigator.clipboard.writeText(codeString);\n      }\n\n      setCopied(true);\n      setTimeout(() => {\n        setCopied(false);\n      }, copyDelay || 1000);\n    };\n\n    return (\n      <button\n        ref={ref}\n        {...rest}\n        data-copied={copied}\n        className={cn(\n          'group ml-auto rounded-md p-1.5 text-zinc-500 transition-colors hover:bg-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-lime-400 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-100',\n          className\n        )}\n        onClick={handleCopy}\n      >\n        {copied ? (\n          <CheckIcon className="h-4 w-4 text-lime-500" />\n        ) : (\n          <ClipboardIcon className="h-4 w-4 " />\n        )}\n      </button>\n    );\n  }\n);\nCopyButton.displayName = 'CopyButton';\n\n/** -----------------------------------------------------------------\n *  Content\n *  ----------------------------------------------------------------- */\ninterface ContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  codeString: string;\n}\n\nconst Content = React.forwardRef<HTMLDivElement, ContentProps>((props, ref) => {\n  const { className, codeString, ...rest } = props;\n  const { setCodeString } = useTerminal();\n\n  React.useMemo(() => {\n    setCodeString(codeString);\n  }, [codeString]);\n\n  return (\n    <div\n      ref={ref}\n      {...rest}\n      className={cn('overflow-x-auto bg-white px-4 py-4', className)}\n    >\n      <SyntaxHighlighter language="bash" style={TerminalStyle}>\n        {codeString}\n      </SyntaxHighlighter>\n    </div>\n  );\n});\nContent.displayName = 'Content';\n\n/** -----------------------------------------------------------------\n *  Export\n *  ----------------------------------------------------------------- */\nconst TerminalRoot = Root;\nconst TerminalHeader = Header;\nconst TerminalCopyButton = CopyButton;\nconst TerminalContent = Content;\n\nexport {\n  Content,\n  CopyButton,\n  Header,\n  Root,\n  TerminalContent,\n  TerminalCopyButton,\n  TerminalHeader,\n  TerminalRoot,\n  useTerminal,\n};\n`,
  },
};
