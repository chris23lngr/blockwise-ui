// @ts-nocheck
// This file is autogenerated by scripts/build-registry.tsx
// Do not edit this file directly.
import { ComponentEntry } from '@/registry/types';
import * as React from 'react';

export const Index: Record<string, ComponentEntry> = {
  button: {
    name: 'button',
    title: 'Button',
    description: 'Button component',
    dependencies: [
      {
        name: '@radix-ui/react-slot',
        url: 'https://www.npmjs.com/package/@radix-ui/react-slot',
        version: '',
      },
    ],
    component: React.lazy(() => import('@/registry/preview/button.tsx')),
    codeString: `import { cn } from '@/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { VariantProps, cva } from 'class-variance-authority';\nimport React from 'react';\n\nconst buttonVariants = cva(\n  'rounded-md text-sm font-medium focus-visible:ring-offset-2 focus-visible:ring-lime-400 focus-visible:ring-2 focus-visible:outline-none focus-visible:ring-offset-white transition-colors inline-flex justify-center items-center',\n  {\n    variants: {\n      variant: {\n        default: 'bg-lime-400 text-zinc-900 shadow-sm hover:bg-lime-300',\n        outline:\n          'border border-zinc-200 ring-4 ring-zinc-50 bg-white hover:bg-zinc-100 text-zinc-700',\n      },\n      size: {\n        default: 'px-4 py-2',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\ninterface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (props, ref) => {\n    const { className, variant, size, asChild, ...rest } = props;\n\n    const Component = asChild ? Slot : 'button';\n\n    return (\n      <Component\n        ref={ref}\n        {...rest}\n        className={cn(buttonVariants({ variant, size, className }))}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n`,
  },
  input: {
    name: 'input',
    title: 'Input',
    description:
      'Input component for forms and more. This is a simple input component.',
    dependencies: [
      {
        name: '@tailwindcss/forms',
        url: 'https://github.com/tailwindlabs/tailwindcss-forms',
        version: '',
      },
    ],
    component: React.lazy(() => import('@/registry/preview/input.tsx')),
    codeString: `import { cn } from '@/lib/utils';\nimport React from 'react';\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>((props, ref) => {\n  const { className, ...rest } = props;\n\n  return (\n    <input\n      ref={ref}\n      className={cn(\n        'rounded-md border border-zinc-200 px-3 py-2 text-sm text-zinc-900 caret-zinc-500 ring-4 ring-zinc-100 transition-colors placeholder:text-zinc-500 focus-within:border-lime-300 focus-within:outline-none focus-within:ring-lime-100 disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-70',\n        className\n      )}\n      {...rest}\n    />\n  );\n});\nInput.displayName = 'Input';\n\nexport { Input };\n`,
  },
  terminal: {
    name: 'terminal',
    title: 'Terminal',
    description: 'Terminal component for displaying command line interfaces.',
    dependencies: [],
    component: React.lazy(() => import('@/registry/preview/terminal.tsx')),
    codeString: `import { cn } from '@/lib/utils';\nimport { ClipboardIcon, TerminalIcon } from 'lucide-react';\nimport React from 'react';\n\n/** -----------------------------------------------------------------\n *  Root\n *  ----------------------------------------------------------------- */\nconst Root = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  return (\n    <div\n      ref={ref}\n      {...rest}\n      className={cn(\n        'w-full max-w-xl rounded-xl border border-zinc-200 bg-zinc-50 p-1',\n        className\n      )}\n    >\n      <div className="w-full overflow-hidden rounded-lg border border-zinc-200">\n        {children}\n      </div>\n    </div>\n  );\n});\nRoot.displayName = 'Root';\n\n/** -----------------------------------------------------------------\n *  Header\n *  ----------------------------------------------------------------- */\nconst Header = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  return (\n    <div\n      ref={ref}\n      {...rest}\n      className={cn(\n        'flex items-center justify-start border-b border-inherit bg-zinc-100 py-1.5 pl-4 pr-2.5',\n        className\n      )}\n    >\n      <TerminalIcon className="h-4 w-4 text-zinc-700" />\n      <p className="ms-2 text-sm font-medium text-zinc-500">Terminal</p>\n    </div>\n  );\n});\nHeader.displayName = 'Header';\n\n/** -----------------------------------------------------------------\n *  CopyButton\n *  ----------------------------------------------------------------- */\nconst CopyButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>((props, ref) => {\n  const { className, ...rest } = props;\n\n  return (\n    <button\n      ref={ref}\n      {...rest}\n      className={cn(\n        'ml-auto rounded-md p-1.5 transition-colors hover:bg-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-lime-400 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-100',\n        className\n      )}\n    >\n      <ClipboardIcon className="h-4 w-4 text-zinc-500" />\n    </button>\n  );\n});\nCopyButton.displayName = 'CopyButton';\n\n/** -----------------------------------------------------------------\n *  Content\n *  ----------------------------------------------------------------- */\nconst Content = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>((props, ref) => {\n  const { className, children, ...rest } = props;\n\n  return (\n    <div\n      ref={ref}\n      {...rest}\n      className={cn('overflow-x-auto bg-white px-4 py-4', className)}\n    >\n      <p className="text-nowrap break-keep font-mono text-sm text-zinc-900">\n        {children}\n      </p>\n    </div>\n  );\n});\n`,
  },
};
