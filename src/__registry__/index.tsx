// @ts-nocheck
// This file is autogenerated by scripts/build-registry.tsx
// Do not edit this file directly.
import * as React from 'react';

export const Index: Record<string, any> = {
  button: {
    name: 'button',
    title: 'Button',
    description: 'Button component',
    dependencies: [
      {
        name: '@radix-ui/react-slot',
        url: 'https://www.npmjs.com/package/@radix-ui/react-slot',
        version: '',
      },
    ],
    component: React.lazy(() => import('@/registry/preview/button.tsx')),
    codeString: `import { cn } from '@/lib/utils';\nimport { Slot } from '@radix-ui/react-slot';\nimport { VariantProps, cva } from 'class-variance-authority';\nimport React from 'react';\n\nconst buttonVariants = cva(\n  'rounded-md text-sm font-medium focus-visible:ring-offset-2 focus-visible:ring-lime-400 focus-visible:ring-2 focus-visible:outline-none focus-visible:ring-offset-white transition-colors inline-flex justify-center items-center',\n  {\n    variants: {\n      variant: {\n        default: 'bg-lime-400 text-zinc-900 shadow-sm hover:bg-lime-300',\n        outline:\n          'border border-zinc-200 ring-4 ring-zinc-50 bg-white hover:bg-zinc-100 text-zinc-700',\n      },\n      size: {\n        default: 'px-4 py-2',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\ninterface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (props, ref) => {\n    const { className, variant, size, asChild, ...rest } = props;\n\n    const Component = asChild ? Slot : 'button';\n\n    return (\n      <Component\n        ref={ref}\n        {...rest}\n        className={cn(buttonVariants({ variant, size, className }))}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n`,
  },
};
