import { index } from '@/registry';
import { registry } from '@/registry/types';
import fs from 'fs';
import path from 'path';

const registryPath = path.resolve(process.cwd(), 'src/registry');

/** ----------------------------------------
 * Build src/registry/index.ts
 * ---------------------------------------- */

const result = registry.safeParse(index);

if (!result.success) {
  console.error(result.error);
  process.exit(1);
}

const data = result.data;

let INDEX = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.tsx
// Do not edit this file directly.
import { ComponentEntry } from '@/registry/types';
import * as React from "react";

export const Index: Record<string, ComponentEntry> = {`;

// Loop through each entry in the registry
for (const [key, value] of Object.entries(data)) {
  const dependencies = value.dependencies.map((dependency) => {
    return `
      {
        name: "${dependency.name}",
        url: "${dependency.url}",
        version: "${dependency.version ?? ''}",
      }
    `;
  });

  // Get the source code of the component
  let source = fs.readFileSync(
    path.join(registryPath, 'ui', `${key}.tsx`),
    'utf-8'
  );

  // Replace all line breaks with \n
  source = source.replace(/\n/g, '\\n');

  INDEX += `
  "${key}": {
    name: "${value.name}",
    title: "${value.title}",
    description: "${value.description}",
    dependencies: [${dependencies.join(',')}],
    component: React.lazy(() => import("@/registry/preview/${key}.tsx")),
    codeString: \`${source}\`,
  },`;
}

INDEX += `
};`;

// Write the contents to the file
const outputPath = path.join(process.cwd(), 'src/__registry__/index.tsx');
fs.writeFileSync(outputPath, INDEX);
